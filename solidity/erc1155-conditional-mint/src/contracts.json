{
  "my-amazing-team:erc1155/MyERC1155ConditionalMint": {
    "fqn": "my-amazing-team:erc1155/MyERC1155ConditionalMint",
    "version": "0.0.1",
    "address": {
      "5": "0xf4Cf562c1548608A15B6202B544829087299A446",
      "goerli": "0xf4Cf562c1548608A15B6202B544829087299A446"
    },
    "artifact": {
      "_format": "hh-sol-artifact-1",
      "contractName": "MyERC1155ConditionalMint",
      "sourceName": "src/erc1155/MyERC1155ConditionalMint.sol",
      "abi": [
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "ownedTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "count",
              "type": "uint256"
            }
          ],
          "name": "claimByERC721",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "allowance",
              "type": "uint256"
            }
          ],
          "name": "setMaxAllowancePerERC721",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            }
          ],
          "name": "setTargetERC721",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b50610530806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630af750a2146100465780630e7e41931461005b578063728885831461006e575b600080fd5b610059610054366004610435565b610081565b005b610059610069366004610459565b610158565b61005961007c366004610472565b6101f5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100ff5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101d15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f6565b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed455565b60007f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed390503381546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a4919061049e565b6001600160a01b0316146102fa5760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b60008481526002820160205260408120805484929061031a9084906104bb565b90915550506001810154600085815260028301602052604090205411156103835760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b3063b164884b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810186905260448101859052608060648201526000608482015260a401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116811461043257600080fd5b50565b60006020828403121561044757600080fd5b81356104528161041d565b9392505050565b60006020828403121561046b57600080fd5b5035919050565b60008060006060848603121561048757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156104b057600080fd5b81516104528161041d565b600082198211156104f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c17a84e49e07e51f60b027ab1b1967028b81b1e4fa0f946ce6d45168b560968464736f6c634300080f0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630af750a2146100465780630e7e41931461005b578063728885831461006e575b600080fd5b610059610054366004610435565b610081565b005b610059610069366004610459565b610158565b61005961007c366004610472565b6101f5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100ff5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101d15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f6565b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed455565b60007f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed390503381546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a4919061049e565b6001600160a01b0316146102fa5760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b60008481526002820160205260408120805484929061031a9084906104bb565b90915550506001810154600085815260028301602052604090205411156103835760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b3063b164884b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810186905260448101859052608060648201526000608482015260a401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116811461043257600080fd5b50565b60006020828403121561044757600080fd5b81356104528161041d565b9392505050565b60006020828403121561046b57600080fd5b5035919050565b60008060006060848603121561048757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156104b057600080fd5b81516104528161041d565b600082198211156104f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c17a84e49e07e51f60b027ab1b1967028b81b1e4fa0f946ce6d45168b560968464736f6c634300080f0033",
      "linkReferences": {},
      "deployedLinkReferences": {}
    },
    "sourceCode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@flair-sdk/contracts/access/ownable/OwnableInternal.sol\";\nimport \"@flair-sdk/contracts/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @title My Custom ERC1155 Conditional Minting\n * @notice This is an example repository that mints ERC1155 tokens if sender owns a specific ERC721.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:required-dependencies IERC1155MintableExtension\n */\ncontract MyERC1155ConditionalMint is OwnableInternal {\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v1.my-amazing-team.contracts.storage.MyERC1155ConditionalMint\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    /**\n     * (1) Define state variables\n     *\n     * We must put all contract \"state\" variables in the Layout struct.\n     * This storage pattern enables modularization using the EIP-2325 Diamond Standard.\n     *\n     *  To learn more about this pattern, see the following resources:\n     *  - https://eips.ethereum.org/EIPS/eip-2325\n     *  - https://eip2535diamonds.substack.com\n     */\n    struct Layout {\n        address targetERC721ContractAddress;\n        uint256 maxAllowancePerERC721;\n        mapping(uint256 => uint256) tokensToMintedAmount;\n    }\n\n    /**\n     * (2) Define custom functions\n     *\n     * You can put privileged functions (using Ownable or role-based AccessControl) here.\n     */\n    function setTargetERC721(address target) external onlyOwner {\n        layout().targetERC721ContractAddress = target;\n    }\n\n    function setMaxAllowancePerERC721(uint256 allowance) external onlyOwner {\n        layout().maxAllowancePerERC721 = allowance;\n    }\n\n    function claimByERC721(\n        uint256 ownedTokenId, // Token ID in ERC721 collection.\n        uint256 claimTokenId, // Token ID in ERC1155 to be minted.\n        uint256 count // How many of this ERC1155 token to mint?\n    ) external {\n        Layout storage l = layout();\n\n        require(IERC721(l.targetERC721ContractAddress).ownerOf(ownedTokenId) == _msgSender(), \"MAX_ALLOWANCE\");\n\n        l.tokensToMintedAmount[ownedTokenId] += count;\n\n        require(l.tokensToMintedAmount[ownedTokenId] <= l.maxAllowancePerERC721, \"MAX_ALLOWANCE\");\n\n        IERC1155MintableExtension(address(this)).mintByFacet(_msgSender(), claimTokenId, count, \"\");\n    }\n}\n"
  }
}
