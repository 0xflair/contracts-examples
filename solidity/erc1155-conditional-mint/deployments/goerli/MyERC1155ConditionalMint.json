{
  "address": "0xf4Cf562c1548608A15B6202B544829087299A446",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ownedTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "claimByERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "setMaxAllowancePerERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "setTargetERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xad2ecfbbe1262fe45864108ab992bc0fa28468f497f920b876ac17defd46c109",
  "receipt": {
    "to": null,
    "from": "0xB68d649F181bDE8A8FeE367535a606Cc3C09fCCd",
    "contractAddress": "0xf4Cf562c1548608A15B6202B544829087299A446",
    "transactionIndex": 33,
    "gasUsed": "338278",
    "logsBloom": "0x
    "blockHash": "0x8a3e5b3fd3c4c11826b723c49aad0e8f57498ab8c5052a540c2eb83f55401426",
    "transactionHash": "0xad2ecfbbe1262fe45864108ab992bc0fa28468f497f920b876ac17defd46c109",
    "logs": [],
    "blockNumber": 8206229,
    "cumulativeGasUsed": "5089990",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f51b962dad5088eb6d2514b5717ee012",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ownedTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"claimByERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowancePerERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setTargetERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:category\":\"NFTs\",\"custom:required-dependencies\":\"IERC1155MintableExtension\",\"custom:type\":\"eip-2535-facet\",\"kind\":\"dev\",\"methods\":{},\"title\":\"My Custom ERC1155 Conditional Minting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTargetERC721(address)\":{\"notice\":\"(2) Define custom functions You can put privileged functions (using Ownable or role-based AccessControl) here.\"}},\"notice\":\"This is an example repository that mints ERC1155 tokens if sender owns a specific ERC721.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/sales/MyERC1155ConditionalMint.sol\":\"MyERC1155ConditionalMint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@flair-sdk/contracts/access/ownable/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Contract ownership standard interface (event only)\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173Events {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xe2a19d82d7050c0cd1afb542253f65ce34a650d7d99c0ffcdec6b4274fc51e31\",\"license\":\"MIT\"},\"@flair-sdk/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./OwnableStorage.sol\\\";\\nimport \\\"./IERC173Events.sol\\\";\\n\\nabstract contract OwnableInternal is IERC173Events, Context {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        require(_msgSender() == _owner(), \\\"Ownable: sender must be owner\\\");\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(_msgSender(), account);\\n    }\\n}\\n\",\"keccak256\":\"0x1f1b08cba51a05c8cea04e13251f9f8b8fc895017071cb205b0b4170900d1e5b\",\"license\":\"MIT\"},\"@flair-sdk/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"openzeppelin.contracts.storage.Ownable\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xaf69959fcc5b87a74426939bc35b8517566494e3ba575b5cfdb1b5c788c0636a\",\"license\":\"MIT\"},\"@flair-sdk/contracts/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n/**\\n * @dev Extension of {ERC1155} that allows other facets from the diamond to mint tokens.\\n */\\ninterface IERC1155MintableExtension {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n     *\\n     * See {ERC1155-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be diamond itself (other facets).\\n     */\\n    function mintByFacet(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function mintByFacet(\\n        address[] calldata tos,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes[] calldata datas\\n    ) external;\\n}\\n\",\"keccak256\":\"0x36a66ac7363491121de86a844df3da8d25195bab00cba74b6fa67ae020715d65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/sales/MyERC1155ConditionalMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@flair-sdk/contracts/access/ownable/OwnableInternal.sol\\\";\\n// import \\\"@flair-sdk/contracts/finance/sales/TieredSales.sol\\\";\\n// import \\\"@flair-sdk/contracts/finance/sales/ITieredSalesRoleBased.sol\\\";\\n// import \\\"@flair-sdk/contracts/metatx/ERC2771ContextInternal.sol\\\";\\n// import \\\"@flair-sdk/contracts/access/roles/AccessControlInternal.sol\\\";\\n// import \\\"@flair-sdk/contracts/token/ERC721/facets/minting/IERC721MintableRoleBased.sol\\\";\\nimport \\\"@flair-sdk/contracts/token/ERC1155/extensions/mintable/IERC1155MintableExtension.sol\\\";\\n// import \\\"@flair-sdk/contracts/token/ERC1155/facets/sales/ERC1155TieredSalesStorage.sol\\\";\\n// import \\\"@flair-sdk/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title My Custom ERC1155 Conditional Minting\\n * @notice This is an example repository that mints ERC1155 tokens if sender owns a specific ERC721.\\n *\\n * @custom:type eip-2535-facet\\n * @custom:category NFTs\\n * @custom:required-dependencies IERC1155MintableExtension\\n */\\ncontract MyERC1155ConditionalMint is OwnableInternal {\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"v1.my-amazing-team.contracts.storage.MyERC1155ConditionalMint\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * (1) Define state variables\\n     *\\n     * We must put all contract \\\"state\\\" variables in the Layout struct.\\n     * This storage pattern enables modularization using the EIP-2325 Diamond Standard.\\n     *\\n     *  To learn more about this pattern, see the following resources:\\n     *  - https://eips.ethereum.org/EIPS/eip-2325\\n     *  - https://eip2535diamonds.substack.com\\n     */\\n    struct Layout {\\n        address targetERC721ContractAddress;\\n        uint256 maxAllowancePerERC721;\\n        mapping(uint256 => uint256) tokensToMintedAmount;\\n    }\\n\\n    /**\\n     * (2) Define custom functions\\n     *\\n     * You can put privileged functions (using Ownable or role-based AccessControl) here.\\n     */\\n    function setTargetERC721(address target) external onlyOwner {\\n        layout().targetERC721ContractAddress = target;\\n    }\\n\\n    function setMaxAllowancePerERC721(uint256 allowance) external onlyOwner {\\n        layout().maxAllowancePerERC721 = allowance;\\n    }\\n\\n    function claimByERC721(\\n        uint256 ownedTokenId, // Token ID in ERC721 collection.\\n        uint256 claimTokenId, // Token ID in ERC1155 to be minted.\\n        uint256 count // How many of this ERC1155 token to mint?\\n    ) external {\\n        Layout storage l = layout();\\n\\n        require(IERC721(l.targetERC721ContractAddress).ownerOf(ownedTokenId) == _msgSender(), \\\"MAX_ALLOWANCE\\\");\\n\\n        l.tokensToMintedAmount[ownedTokenId] += count;\\n\\n        require(l.tokensToMintedAmount[ownedTokenId] <= l.maxAllowancePerERC721, \\\"MAX_ALLOWANCE\\\");\\n\\n        IERC1155MintableExtension(address(this)).mintByFacet(_msgSender(), claimTokenId, count, \\\"\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3c86272d26a1f3eca723220f9ee78ff03a9b9655c06a65b8e873fda479f59ab6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610530806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630af750a2146100465780630e7e41931461005b578063728885831461006e575b600080fd5b610059610054366004610435565b610081565b005b610059610069366004610459565b610158565b61005961007c366004610472565b6101f5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100ff5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101d15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f6565b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed455565b60007f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed390503381546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a4919061049e565b6001600160a01b0316146102fa5760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b60008481526002820160205260408120805484929061031a9084906104bb565b90915550506001810154600085815260028301602052604090205411156103835760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b3063b164884b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810186905260448101859052608060648201526000608482015260a401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116811461043257600080fd5b50565b60006020828403121561044757600080fd5b81356104528161041d565b9392505050565b60006020828403121561046b57600080fd5b5035919050565b60008060006060848603121561048757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156104b057600080fd5b81516104528161041d565b600082198211156104f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea26469706673582212207395d5d1c90d0bb290dd516e8b6c31a78dec86c8bd3b1a3df748c04e51ed355964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630af750a2146100465780630e7e41931461005b578063728885831461006e575b600080fd5b610059610054366004610435565b610081565b005b610059610069366004610459565b610158565b61005961007c366004610472565b6101f5565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146100ff5760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064015b60405180910390fd5b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7fc0ea367cb0174dd5521cd2372c76f8c13e6c1f832c71f1d6e0cbc185c9cc8ed4546001600160a01b031633146101d15760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100f6565b7f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed455565b60007f050cafb440aeffa6b1382dab196d845080329d36b9d43ff9bd71d0ed37c3bed390503381546040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039283169290911690636352211e90602401602060405180830381865afa158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a4919061049e565b6001600160a01b0316146102fa5760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b60008481526002820160205260408120805484929061031a9084906104bb565b90915550506001810154600085815260028301602052604090205411156103835760405162461bcd60e51b815260206004820152600d60248201527f4d41585f414c4c4f57414e43450000000000000000000000000000000000000060448201526064016100f6565b3063b164884b336040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810186905260448101859052608060648201526000608482015260a401600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b5050505050505050565b6001600160a01b038116811461043257600080fd5b50565b60006020828403121561044757600080fd5b81356104528161041d565b9392505050565b60006020828403121561046b57600080fd5b5035919050565b60008060006060848603121561048757600080fd5b505081359360208301359350604090920135919050565b6000602082840312156104b057600080fd5b81516104528161041d565b600082198211156104f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea26469706673582212207395d5d1c90d0bb290dd516e8b6c31a78dec86c8bd3b1a3df748c04e51ed355964736f6c634300080f0033",
  "devdoc": {
    "custom:category": "NFTs",
    "custom:required-dependencies": "IERC1155MintableExtension",
    "custom:type": "eip-2535-facet",
    "kind": "dev",
    "methods": {},
    "title": "My Custom ERC1155 Conditional Minting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setTargetERC721(address)": {
        "notice": "(2) Define custom functions You can put privileged functions (using Ownable or role-based AccessControl) here."
      }
    },
    "notice": "This is an example repository that mints ERC1155 tokens if sender owns a specific ERC721.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}