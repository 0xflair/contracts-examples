{
  "language": "Solidity",
  "sources": {
    "@flair-sdk/contracts/access/ownable/IERC173Events.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @title Contract ownership standard interface (event only)\n * @dev see https://eips.ethereum.org/EIPS/eip-173\n */\ninterface IERC173Events {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"
    },
    "@flair-sdk/contracts/access/ownable/OwnableInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./OwnableStorage.sol\";\nimport \"./IERC173Events.sol\";\n\nabstract contract OwnableInternal is IERC173Events, Context {\n    using OwnableStorage for OwnableStorage.Layout;\n\n    modifier onlyOwner() {\n        require(_msgSender() == _owner(), \"Ownable: sender must be owner\");\n        _;\n    }\n\n    function _owner() internal view virtual returns (address) {\n        return OwnableStorage.layout().owner;\n    }\n\n    function _transferOwnership(address account) internal virtual {\n        OwnableStorage.layout().setOwner(account);\n        emit OwnershipTransferred(_msgSender(), account);\n    }\n}\n"
    },
    "@flair-sdk/contracts/access/ownable/OwnableStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary OwnableStorage {\n    struct Layout {\n        address owner;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.Ownable\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function setOwner(Layout storage l, address owner) internal {\n        l.owner = owner;\n    }\n}\n"
    },
    "@flair-sdk/contracts/access/roles/AccessControlInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./AccessControlStorage.sol\";\nimport \"./IAccessControlEvents.sol\";\n\nabstract contract AccessControlInternal is Context, IAccessControlEvents {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function _hasRole(bytes32 role, address account) internal view virtual returns (bool) {\n        return AccessControlStorage.layout().roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!_hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function _getRoleAdmin(bytes32 role) internal view virtual returns (bytes32) {\n        return AccessControlStorage.layout().roles[role].adminRole;\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _renounceRole(bytes32 role, address account) internal virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = _getRoleAdmin(role);\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (_hasRole(role, account)) {\n            AccessControlStorage.layout().roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@flair-sdk/contracts/access/roles/AccessControlStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary AccessControlStorage {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    struct Layout {\n        mapping(bytes32 => RoleData) roles;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.AccessControl\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@flair-sdk/contracts/access/roles/IAccessControlEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlEvents {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/ITieredSales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./ITieredSalesInternal.sol\";\n\ninterface ITieredSales is ITieredSalesInternal {\n    function onTierAllowlist(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external view returns (bool);\n\n    function eligibleForTier(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external view returns (uint256);\n\n    function mintByTier(\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external payable;\n\n    function remainingForTier(uint256 tierId) external view returns (uint256);\n\n    function walletMintedByTier(uint256 tierId, address wallet) external view returns (uint256);\n\n    function tierMints(uint256 tierId) external view returns (uint256);\n\n    function totalReserved() external view returns (uint256);\n\n    function reservedMints() external view returns (uint256);\n\n    function tiers(uint256 tierId) external view returns (Tier memory);\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/ITieredSalesInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface ITieredSalesInternal {\n    struct Tier {\n        uint256 start;\n        uint256 end;\n        address currency;\n        uint256 price;\n        uint256 maxPerWallet;\n        bytes32 merkleRoot;\n        uint256 reserved;\n        uint256 maxAllocation;\n    }\n\n    event TierSale(uint256 indexed tierId, address indexed operator, address indexed minter, uint256 count);\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/ITieredSalesRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface ITieredSalesRoleBased {\n    function mintByTierByRole(\n        address minter,\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external payable;\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/TieredSales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./ITieredSales.sol\";\nimport \"./TieredSalesInternal.sol\";\n\n/**\n * @title Abstract sales mechanism for any asset (e.g NFTs) with multiple tiered pricing, allowlist and allocation plans.\n */\nabstract contract TieredSales is ITieredSales, TieredSalesInternal {\n    function onTierAllowlist(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) public view virtual returns (bool) {\n        return super._onTierAllowlist(tierId, minter, maxAllowance, proof);\n    }\n\n    function eligibleForTier(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) public view virtual returns (uint256 maxMintable) {\n        return super._eligibleForTier(tierId, minter, maxAllowance, proof);\n    }\n\n    function remainingForTier(uint256 tierId) public view virtual returns (uint256) {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        uint256 availableSupply = _availableSupplyForTier(tierId);\n        uint256 availableAllocation = l.tiers[tierId].maxAllocation - l.tierMints[tierId];\n\n        if (availableSupply < availableAllocation) {\n            return availableSupply;\n        } else {\n            return availableAllocation;\n        }\n    }\n\n    function walletMintedByTier(uint256 tierId, address wallet) public view virtual returns (uint256) {\n        return TieredSalesStorage.layout().walletMinted[tierId][wallet];\n    }\n\n    function tierMints(uint256 tierId) public view virtual returns (uint256) {\n        return TieredSalesStorage.layout().tierMints[tierId];\n    }\n\n    function totalReserved() external view virtual returns (uint256) {\n        return TieredSalesStorage.layout().totalReserved;\n    }\n\n    function reservedMints() external view virtual returns (uint256) {\n        return TieredSalesStorage.layout().reservedMints;\n    }\n\n    function tiers(uint256 tierId) external view virtual returns (Tier memory) {\n        return TieredSalesStorage.layout().tiers[tierId];\n    }\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/TieredSalesInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./ITieredSalesInternal.sol\";\nimport \"./TieredSalesStorage.sol\";\n\nimport \"../../access/ownable/OwnableInternal.sol\";\n\n/**\n * @title Sales mechanism for NFTs with multiple tiered pricing, allowlist and allocation plans\n */\nabstract contract TieredSalesInternal is ITieredSalesInternal, Context, OwnableInternal {\n    using TieredSalesStorage for TieredSalesStorage.Layout;\n\n    function _configureTiering(uint256 tierId, Tier calldata tier) internal virtual {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(tier.maxAllocation >= l.tierMints[tierId], \"LOWER_THAN_MINTED\");\n\n        if (l.tiers[tierId].reserved > 0) {\n            require(tier.reserved >= l.tierMints[tierId], \"LOW_RESERVE_AMOUNT\");\n        }\n\n        if (l.tierMints[tierId] > 0) {\n            require(tier.maxPerWallet >= l.tiers[tierId].maxPerWallet, \"LOW_MAX_PER_WALLET\");\n        }\n\n        l.totalReserved -= l.tiers[tierId].reserved;\n        l.tiers[tierId] = tier;\n        l.totalReserved += tier.reserved;\n    }\n\n    function _configureTiering(uint256[] calldata _tierIds, Tier[] calldata _tiers) internal virtual {\n        for (uint256 i = 0; i < _tierIds.length; i++) {\n            _configureTiering(_tierIds[i], _tiers[i]);\n        }\n    }\n\n    function _onTierAllowlist(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal view virtual returns (bool) {\n        return\n            MerkleProof.verify(\n                proof,\n                TieredSalesStorage.layout().tiers[tierId].merkleRoot,\n                _generateMerkleLeaf(minter, maxAllowance)\n            );\n    }\n\n    function _eligibleForTier(\n        uint256 tierId,\n        address minter,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal view virtual returns (uint256 maxMintable) {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(l.tiers[tierId].maxPerWallet > 0, \"NOT_EXISTS\");\n        require(block.timestamp >= l.tiers[tierId].start, \"NOT_STARTED\");\n        require(block.timestamp <= l.tiers[tierId].end, \"ALREADY_ENDED\");\n\n        maxMintable = l.tiers[tierId].maxPerWallet - l.walletMinted[tierId][minter];\n\n        if (l.tiers[tierId].merkleRoot != bytes32(0)) {\n            require(l.walletMinted[tierId][minter] < maxAllowance, \"MAXED_ALLOWANCE\");\n            require(_onTierAllowlist(tierId, minter, maxAllowance, proof), \"NOT_ALLOWLISTED\");\n\n            uint256 remainingAllowance = maxAllowance - l.walletMinted[tierId][minter];\n\n            if (maxMintable > remainingAllowance) {\n                maxMintable = remainingAllowance;\n            }\n        }\n    }\n\n    function _availableSupplyForTier(uint256 tierId) internal view virtual returns (uint256 remaining) {\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        // Substract all the remaining reserved spots from the total remaining supply...\n        remaining = _remainingSupply(tierId) - (l.totalReserved - l.reservedMints);\n\n        // If this tier has reserved spots, add remaining spots back to result...\n        if (l.tiers[tierId].reserved > 0) {\n            remaining += (l.tiers[tierId].reserved - l.tierMints[tierId]);\n        }\n    }\n\n    function _executeSale(\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal virtual {\n        address minter = _msgSender();\n\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\n\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(count <= maxMintable, \"EXCEEDS_MAX\");\n        require(count <= _availableSupplyForTier(tierId), \"EXCEEDS_SUPPLY\");\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \"EXCEEDS_ALLOCATION\");\n\n        if (l.tiers[tierId].currency == address(0)) {\n            require(l.tiers[tierId].price * count <= msg.value, \"INSUFFICIENT_AMOUNT\");\n        } else {\n            IERC20(l.tiers[tierId].currency).transferFrom(minter, address(this), l.tiers[tierId].price * count);\n        }\n\n        l.walletMinted[tierId][minter] += count;\n        l.tierMints[tierId] += count;\n\n        if (l.tiers[tierId].reserved > 0) {\n            l.reservedMints += count;\n        }\n\n        emit TierSale(tierId, minter, minter, count);\n    }\n\n    function _executeSalePrivileged(\n        address minter,\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) internal virtual {\n        uint256 maxMintable = _eligibleForTier(tierId, minter, maxAllowance, proof);\n\n        TieredSalesStorage.Layout storage l = TieredSalesStorage.layout();\n\n        require(count <= maxMintable, \"EXCEEDS_MAX\");\n        require(count <= _availableSupplyForTier(tierId), \"EXCEEDS_SUPPLY\");\n        require(count + l.tierMints[tierId] <= l.tiers[tierId].maxAllocation, \"EXCEEDS_ALLOCATION\");\n\n        l.walletMinted[tierId][minter] += count;\n        l.tierMints[tierId] += count;\n\n        if (l.tiers[tierId].reserved > 0) {\n            l.reservedMints += count;\n        }\n\n        emit TierSale(tierId, _msgSender(), minter, count);\n    }\n\n    function _remainingSupply(\n        uint256 /*tierId*/\n    ) internal view virtual returns (uint256) {\n        // By default assume supply is unlimited (that means reserving allocation for tiers is irrelevant)\n        return type(uint256).max;\n    }\n\n    /* PRIVATE */\n\n    function _generateMerkleLeaf(address account, uint256 maxAllowance) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(account, maxAllowance));\n    }\n}\n"
    },
    "@flair-sdk/contracts/finance/sales/TieredSalesStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"./ITieredSales.sol\";\n\nlibrary TieredSalesStorage {\n    struct Layout {\n        uint256 totalReserved;\n        uint256 reservedMints;\n        mapping(uint256 => ITieredSales.Tier) tiers;\n        mapping(uint256 => uint256) tierMints;\n        mapping(uint256 => mapping(address => uint256)) walletMinted;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v2.flair.contracts.storage.TieredSales\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@flair-sdk/contracts/metatx/ERC2771ContextInternal.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"./ERC2771ContextStorage.sol\";\n\nabstract contract ERC2771ContextInternal is Context {\n    function _isTrustedForwarder(address operator) internal view returns (bool) {\n        return ERC2771ContextStorage.layout().trustedForwarder == operator;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (_isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (_isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "@flair-sdk/contracts/metatx/ERC2771ContextStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\nlibrary ERC2771ContextStorage {\n    struct Layout {\n        address trustedForwarder;\n    }\n\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"openzeppelin.contracts.storage.ERC2771Context\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n}\n"
    },
    "@flair-sdk/contracts/token/ERC1155/facets/minting/IERC1155MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC1155} that allows a specific role to mint tokens.\n */\ninterface IERC1155MintableRoleBased {\n    /**\n     * @dev Creates `amount` new tokens for `to`, of token type `id`.\n     *\n     * See {ERC1155-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have MINTER_ROLE.\n     */\n    function mintByRole(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function mintByRole(\n        address[] calldata tos,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes[] calldata data\n    ) external;\n}\n"
    },
    "@flair-sdk/contracts/token/ERC721/facets/minting/IERC721MintableRoleBased.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\n/**\n * @dev Extension of {ERC721} that allows a specific role to mint tokens.\n */\ninterface IERC721MintableRoleBased {\n    /**\n     * @dev Mints `amount` new tokens for `to`.\n     */\n    function mintByRole(address to, uint256 amount) external;\n\n    /**\n     * @dev Mints multiple `amount`s of new tokens for every single address in `tos`.\n     */\n    function mintByRole(address[] calldata tos, uint256[] calldata amounts) external;\n\n    /**\n     * @dev Mint a new token with a dedicated tokenURI.\n     */\n    function mintByRole(\n        address to,\n        uint256 amount,\n        string[] calldata tokenURIs\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\n     * consuming from one or the other at each step according to the instructions given by\n     * `proofFlags`.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/sales/MyCustomTieredSales.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\nimport \"@flair-sdk/contracts/access/ownable/OwnableInternal.sol\";\nimport \"@flair-sdk/contracts/finance/sales/TieredSales.sol\";\nimport \"@flair-sdk/contracts/finance/sales/ITieredSalesRoleBased.sol\";\nimport \"@flair-sdk/contracts/metatx/ERC2771ContextInternal.sol\";\nimport \"@flair-sdk/contracts/access/roles/AccessControlInternal.sol\";\nimport \"@flair-sdk/contracts/token/ERC721/facets/minting/IERC721MintableRoleBased.sol\";\nimport \"@flair-sdk/contracts/token/ERC1155/facets/minting/IERC1155MintableRoleBased.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\"; // TODO replace with diamond version\n\n/**\n * @title My Custom Tiered Sales\n * @notice This is developed in-house to provide custom sales mechanism for our custom project.\n *\n * @custom:type eip-2535-facet\n * @custom:category NFTs\n * @custom:provides-interfaces ITieredSales, ITieredSalesRoleBased\n */\ncontract MyCustomTieredSales is\n    ITieredSalesRoleBased,\n    OwnableInternal,\n    TieredSales,\n    ERC2771ContextInternal,\n    AccessControlInternal,\n    ReentrancyGuard\n{\n    using TieredSalesStorage for TieredSalesStorage.Layout;\n\n    /**\n     * (1) Define state variables\n     *\n     * We must put all contract \"state\" variables in the Layout struct.\n     * This storage pattern enables modularization using the EIP-2325 Diamond Standard.\n     *\n     * To learn more about this pattern, see the following resources:\n     *  - https://eips.ethereum.org/EIPS/eip-2325\n     *  - https://eip2535diamonds.substack.com\n     */\n    struct Layout {\n        address targetERC721ContractAddress;\n        address targetERC1155ContractAddress;\n    }\n\n    bytes32 public constant MERCHANT_ROLE = keccak256(\"MERCHANT_ROLE\");\n    bytes32 internal constant STORAGE_SLOT = keccak256(\"v1.my-amazing-team.contracts.storage.MyCustomTieredSales\");\n\n    function layout() internal pure returns (Layout storage l) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly {\n            l.slot := slot\n        }\n    }\n\n    function _msgSender() internal view virtual override(Context, ERC2771ContextInternal) returns (address) {\n        return ERC2771ContextInternal._msgSender();\n    }\n\n    function _msgData() internal view virtual override(Context, ERC2771ContextInternal) returns (bytes calldata) {\n        return ERC2771ContextInternal._msgData();\n    }\n\n    /**\n     * (2) Define custom functions\n     *\n     * You can put privileged functions (using Ownable or role-based AccessControl) here.\n     */\n    function setTargetTokens(address erc721ContractAddress, address erc1155ContractAddress) external onlyOwner {\n        layout().targetERC721ContractAddress = erc721ContractAddress;\n        layout().targetERC1155ContractAddress = erc1155ContractAddress;\n    }\n\n    /**\n     * (3) Customize the \"mintByTier\" method.\n     *\n     * This custom facet contract extends TieredSales, which needs us to define what sales logic we want\n     * when users are minting a specific tier.\n     */\n    function mintByTier(\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external payable override nonReentrant {\n        // This call checks if user has enough allowance for the tier, checks the proof, records the minted amount,\n        // and ensures the payment is correct.\n        //\n        // If this call is not reverted you can safely provide the _msgSender() with any assets you want for the sale.\n        // For example you can mint \"count\" NFTs to the _msgSender(), or send \"count\" amount of an ERC20 tokens, etc.\n        super._executeSale(tierId, count, maxAllowance, proof);\n\n        // This is the custom logic for our project, which in this case is to mint from ERC721 and ERC1155 contracts.\n        IERC721MintableRoleBased(layout().targetERC721ContractAddress).mintByRole(_msgSender(), count);\n        IERC1155MintableRoleBased(layout().targetERC1155ContractAddress).mintByRole(_msgSender(), tierId, count, \"\");\n    }\n\n    function mintByTierByRole(\n        address minter,\n        uint256 tierId,\n        uint256 count,\n        uint256 maxAllowance,\n        bytes32[] calldata proof\n    ) external payable virtual nonReentrant onlyRole(MERCHANT_ROLE) {\n        super._executeSalePrivileged(minter, tierId, count, maxAllowance, proof);\n\n        // This is the custom logic for our project, which in this case is to mint from ERC721 and ERC1155 contracts.\n        IERC721MintableRoleBased(layout().targetERC721ContractAddress).mintByRole(_msgSender(), count);\n        IERC1155MintableRoleBased(layout().targetERC1155ContractAddress).mintByRole(_msgSender(), tierId, count, \"\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1337
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}